* Color settings

** Background color
:PROPERTIES:
:ID:       e6d13348-6a67-46d7-97aa-00c79cdcc5dc
:END:
#+begin_src emacs-lisp
  ;;(set-background-color "honeydew")
#+end_src

** Highlight color
:PROPERTIES:
:ID:       f1f73435-7839-4b47-9350-e0320d93c23d
:END:
#+begin_src emacs-lisp
  ;;(set-face-attribute 'region nil :background "pale green" :foreground "black")
#+end_src

* Changing default terminal and adding keybindings
:PROPERTIES:
:ID:       ab11b4ea-ba22-465f-ac02-c068540540fe
:END:
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src

* Minor settings
** Display time
:PROPERTIES:
:ID:       01559c42-1684-4d35-9e79-d2c1e6b68066
:END:
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src

** Subword
:PROPERTIES:
:ID:       dc7aca1b-634b-4a3a-b79d-f4df6b47f874
:END:
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** Electric
:PROPERTIES:
:ID:       d815372b-2248-4ea1-9b67-ebbb11c2ab14
:END:
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+end_src

** Show line and column number
:PROPERTIES:
:ID:       292a5e6d-531a-4acc-9203-87e90e831b58
:END:
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Recent files
:PROPERTIES:
:ID:       9169388f-7088-4f81-bbbe-b522d91f9165
:END:
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

** Save history
:PROPERTIES:
:ID:       1bae965e-3073-4214-9674-7bc18a01c310
:END:
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src
* Org
** emacs-lisp org-header footer
:PROPERTIES:
:ID:       4c1814a1-ab51-45a7-98f1-a2e89952bea6
:END:
#+begin_src emacs-lisp
  ;; (add-to-list 'org-structure-template-alist
  ;; 	     '("el" "#+begin_src emacs-lisp\n?\n#+end_src"))
#+end_src

** Basic config
:PROPERTIES:
:ID:       8e6245c0-dfa0-496b-8540-f8ff34dbd592
:END:
#+begin_src emacs-lisp
  ;;(setq org-src-window-setup 'current-window)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src
** Org agenda file directories
:PROPERTIES:
:ID:       b292cb4f-bbf2-4067-8700-109368ed2a08
:END:
#+begin_src emacs-lisp
  ;;(setq org-agenda-files '("/home/durbar/Sync/my_multiverse/notes/org/agenda"))
  ;;(setq org-agenda-files '("~/Sync/my_multiverse/notes/org1"))
#+end_src
** Org capture template
:PROPERTIES:
:ID:       14f033d5-e638-4ecc-a890-121b349d5549
:END:
#+begin_src emacs-lisp
  ;; (setq org-capture-templates
  ;;       '(("t" "Todo" entry (file+headline "~/Sync/my_multiverse/notes/org/agenda/my-life.org" "Tasks")
  ;;          "* TODO %?\n  %i\n  %a")
  ;;         ("j" "Journal" entry (file+olp+datetree "~/Sync/my_multiverse/notes/org/journal/daily-journal.org")
  ;;          "* %?\nEntered on %U\n  %i\n  %a")))


  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Sync/my_multiverse/notes/org1/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("c" "Capture anything" entry (file+olp+datetree "~/Sync/my_multiverse/notes/org1/capture.org")
           "* Entered on %U\n%?")))
#+end_src
** org inline image size
:PROPERTIES:
:ID:       155f8d9d-60c1-4902-89cc-6cd57e2515a5
:END:
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

** org-zettelkasten config
:PROPERTIES:
:ID:       e408f1b1-596b-4c2b-8bda-c7c4a431bd43
:END:
#+begin_src emacs-lisp
  (require 'find-lisp)
  (mapcar (lambda (elt) (add-to-list 'org-agenda-text-search-extra-files elt))
          (find-lisp-find-files default-directory "~/Sync/my_multiverse/notes/org1"))

  (setq org-id-link-to-org-use-id t)
  (setq org-id-extra-files 'org-agenda-text-search-extra-files)
  (org-id-update-id-locations)

  (org-link-set-parameters "id" :complete #'org-id-complete-link)

  (defun org-id-complete-link ()
    "Create an id: link using completion."
    (concat "id:" (org-id-get-with-outline-path-completion org-refile-targets)))

  (add-to-list 'org-agenda-text-search-extra-files '(org-agenda-files :maxlevel . 2))

  (defun zorg-backlinks ()
    "Search for backlinks to current entry."
    (interactive)
    (let ((link (condition-case nil
                    (org-id-store-link)
                  (error "Unable to create a link to here"))))
      (org-occur-in-agenda-files (regexp-quote link))))
#+end_src
* Inhibit startup splash screen
:PROPERTIES:
:ID:       2a0fc0c8-3b47-4b67-b40c-064ccc06829c
:END:
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

* Scrolling
:PROPERTIES:
:ID:       141f4c74-ba03-4aee-826a-25e98760a6fd
:END:
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

* Ring-bell
:PROPERTIES:
:ID:       2aa20231-9d46-4b12-864e-a8f7d8fe6546
:END:
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Global highlight line mode
:PROPERTIES:
:ID:       14be0dbd-608f-4532-b394-11364d13e8dd
:END:
#+begin_src emacs-lisp
  ;;(when window-system (global-hl-line-mode t))
#+end_src

* Global prettify symbols
:PROPERTIES:
:ID:       c32ead36-4830-4345-8675-937b58cc6836
:END:
#+begin_src emacs-lisp
  ;;(when window-system (global-prettify-symbols-mode t))
#+end_src

* Auto-save and backup
:PROPERTIES:
:ID:       d279f872-362e-4962-884f-b4cbb4fe8849
:END:
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

* Scroll, tool and menu bar
:PROPERTIES:
:ID:       748a6743-7278-411f-84c6-0317e9fcc469
:END:
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;;(menu-bar-mode -1)
#+end_src
* Buffers
** kill all buffers
:PROPERTIES:
:ID:       bf4c289a-71bd-4d4e-b100-15fcf9d80570
:END:
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+end_src

** enable ibuffer
:PROPERTIES:
:ID:       31e7ccce-2cb0-48ef-86b6-bc040f5a6439
:END:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

** expert mode
:PROPERTIES:
:ID:       8327d17f-80c9-4ace-ba1d-dacbc9fab9ca
:END:
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src

** always kill current buffer
:PROPERTIES:
:ID:       d22498bc-0573-43f0-8950-c83cab11cd30
:END:
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src

* Config edit/reload
** edit
:PROPERTIES:
:ID:       9cc68fa1-d253-408f-9fdd-a33dd30e3aa0
:END:
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

#+end_src

** reload
:PROPERTIES:
:ID:       b8658af6-6b08-4aaf-b902-07a876989b56
:END:
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* Window splitting function
:PROPERTIES:
:ID:       4e8ac810-dd1d-4c4a-9e53-d9e3e170c035
:END:
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* Convenient functions
** kill-whole-word
:PROPERTIES:
:ID:       7499dfa0-720c-475a-9a74-1ecf4416b3d1
:END:
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src

** copy-whole-line
:PROPERTIES:
:ID:       d0544b82-ba1e-454a-99ce-22dabda01368
:END:
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
	  (kill-new
	   (buffer-substring
	    (point-at-bol)
	    (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src

* ob-ipython
:PROPERTIES:
:ID:       eba1bc68-5d3b-48d3-becd-b2d4c083bfbb
:END:
#+begin_src emacs-lisp
;;  (use-package ob-ipython
;;    :ensure t)
#+end_src

* python-interaction
:PROPERTIES:
:ID:       cd97a9a5-3983-4797-9875-a1f9adab2471
:END:
#+begin_src emacs-lisp
;;    (setq python-shell-interpreter "/usr/bin/ipython"
;;          python-shell-interpreter-args "--simple-prompt -i")
    ;;(setq python-shell-interpreter "/usr/bin/python3")
#+end_src

* org-babel-python
:PROPERTIES:
:ID:       207bf7da-e41c-4c1a-9b88-6852145624ce
:END:
#+begin_src emacs-lisp
    (setq org-babel-python-command "/usr/bin/python3")
#+end_src

* org-babel
:PROPERTIES:
:ID:       81ecbdd7-45ca-4b6a-80b9-7fc44eae5143
:END:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
  ;;   (ipython .t)
     (perl . t)
     (latex . t))
   )
#+end_src

* paredit
:PROPERTIES:
:ID:       5cffeaf0-6d07-4e00-a236-536b5799750a
:END:
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t)
#+end_src

* auctex
:PROPERTIES:
:ID:       93b75577-e6bb-41de-a06e-db7ed9fcb531
:END:
#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+end_src

* swiper
:PROPERTIES:
:ID:       d25f1fa6-ee8b-4aab-8e80-30cca239bdfd
:END:
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+end_src

* org-indent
:PROPERTIES:
:ID:       09c2ceae-4e7c-4761-9d74-73d2f11e4d23
:END:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

* Battery indicator
:PROPERTIES:
:ID:       a7a35841-9f8b-4a9f-8a12-5a5b728d4ff1
:END:
#+begin_src emacs-lisp
  (display-battery-mode)
#+end_src

* Set UTF-8 encoding
:PROPERTIES:
:ID:       e7b610da-a9fb-4bf7-8875-0d9b6c7b150c
:END:
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

#+end_src

* Default browser
:PROPERTIES:
:ID:       3a7f9ae9-4fd4-4794-b176-999bfd2c6172
:END:
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "brave-browser-stable")
#+end_src

* Show parens
:PROPERTIES:
:ID:       e88b98ea-51d6-433a-889f-fa4135dc1db1
:END:
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

* Transparency
:PROPERTIES:
:ID:       3a33d211-57fe-4c51-a34c-8fb5a95d5867
:END:
#+begin_src emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(93 .80))
  ;;(add-to-list 'default-frame-alist '(alpha . (93 . 80)))
#+end_src

* Slime
** install
:PROPERTIES:
:ID:       2b043f04-c643-41e8-a1ac-0c5bf606ad3e
:END:
#+begin_src emacs-lisp
  (use-package slime
    :ensure t)
#+end_src

** slime config
:PROPERTIES:
:ID:       ccaf6f22-369b-4842-a223-505fdcf69ef8
:END:
#+begin_src emacs-lisp
  ;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+end_src

* org-preview-html
:PROPERTIES:
:ID:       12df3001-2594-4fcd-a1b2-e894d9db71ef
:END:
#+begin_src emacs-lisp
  (use-package org-preview-html
    :ensure t)
#+end_src

* vertico mode
:PROPERTIES:
:ID:       1b8b5b62-caa9-48a9-a968-d440aa9d6272
:END:
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

* Olivetti mode
:PROPERTIES:
:ID:       db063f83-82b8-4949-ad26-4d25eedc1c40
:END:
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t)
#+end_src

* Modus themes
:PROPERTIES:
:ID:       b877f000-d215-4516-855e-20f6d8788b9e
:END:
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t)
#+end_src

* open files in external app
:PROPERTIES:
:ID:       df19a962-db4c-43c6-9c0b-2c97943838dd
:END:
#+begin_src emacs-lisp
  (defun xah-open-in-external-app (&optional @fname)
    "Open the current file or dired marked files in external app.
  When called in emacs lisp, if @fname is given, open that.
  URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'
  Version 2019-11-04 2021-02-16"
    (interactive)
    (let* (
           ($file-list
            (if @fname
                (progn (list @fname))
              (if (string-equal major-mode "dired-mode")
                  (dired-get-marked-files)
                (list (buffer-file-name)))))
           ($do-it-p (if (<= (length $file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))
      (when $do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda ($fpath)
             (shell-command (concat "PowerShell -Command \"Invoke-Item -LiteralPath\" " "'" (shell-quote-argument (expand-file-name $fpath )) "'")))
           $file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda ($fpath)
             (shell-command
              (concat "open " (shell-quote-argument $fpath))))  $file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda ($fpath) (let ((process-connection-type nil))
                              (start-process "" nil "xdg-open" $fpath))) $file-list))))))
#+end_src

* Eglot
:PROPERTIES:
:ID:       17fb9b42-d90c-466c-ad76-5a1edc235c15
:END:
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src

** Setting python-lanuage-server pylsp path
:PROPERTIES:
:ID:       aca2bf74-0cbc-48a4-bedb-c5b80baefe30
:END:

#+begin_src emacs-lisp
(add-to-list 'exec-path "/home/durbar/.local/bin/")
#+end_src

* Company mode
:PROPERTIES:
:ID:       43695a72-26f3-42ad-91e0-636bfa2cebdf
:END:
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+end_src

* PDF tools
:PROPERTIES:
:ID:       b2e07d2f-32b9-4aa9-97e0-b37ee89a05f5
:END:
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+end_src

* ORG pdf view
:PROPERTIES:
:ID:       2e2784ee-1c5a-4df9-86f1-cabde50a726a
:END:
#+begin_src emacs-lisp
  (use-package org-pdftools
    :ensure t)
#+end_src
* A highlight annotation mode for Emacs using font-lock
:PROPERTIES:
:ID:       21d0c08a-0ccb-4786-bc52-7a2ccb637fdf
:END:

#+begin_src emacs-lisp
  ; this seems to be necessary to get the tooltips to work.

  (setq font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))

  (defun highlight-region-yellow (beg end)
   (interactive "r")
   (set-text-properties
    beg end
    '(font-lock-face (:background "yellow")
                     highlighted t
                     help-echo "highlighted")))

  (global-set-key (kbd "s-y") 'highlight-region-yellow)
#+end_src

#+begin_src emacs-lisp
  ; this seems to be necessary to get the tooltips to work.

  (setq font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))

  (defun highlight-region-blue (beg end)
   (interactive "r")
   (set-text-properties
    beg end
    '(font-lock-face (:background "light blue")
                     highlighted t
                     help-echo "highlighted")))

  (global-set-key (kbd "s-b") 'highlight-region-blue)
#+end_src

#+begin_src emacs-lisp
  ; this seems to be necessary to get the tooltips to work.

  (setq font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))

  (defun highlight-region-green (beg end)
   (interactive "r")
   (set-text-properties
    beg end
    '(font-lock-face (:background "light green")
                     highlighted t
                     help-echo "highlighted")))

  (global-set-key (kbd "s-g") 'highlight-region-green)
#+end_src



#+begin_src emacs-lisp
  ; this seems to be necessary to get the tooltips to work.

  (setq font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))

  (defun highlight-region-red (beg end)
   (interactive "r")
   (set-text-properties
    beg end
    '(font-lock-face (:background "light pink")
                     highlighted t
                     help-echo "highlighted")))

  (global-set-key (kbd "s-d") 'highlight-region-red)
#+end_src


#+begin_src emacs-lisp
  (defun highlight-get-highlights ()
    "Scan buffer for list of highlighted regions.
  These are defined only by the highlighted property. That means
  adjacent highlighted regions will be merged into one region with
  the color of the first one."
    (save-excursion
      (goto-char (point-min))
      (let ((highlights '())
            (p)
            (beg)
            (end)
            (note)
            (color))
        ;; corner case of first point being highlighted
        (when (get-text-property (point) 'highlighted)
          (setq beg (point)
                end (next-single-property-change (point) 'highlighted)
                color (background-color-at-point)
                help-echo (get-text-property (point) 'help-echo))
          (add-to-list 'highlights (list beg end color help-echo) t)
          (goto-char end))

        ;; Now the rest of the buffer
        (while (setq p (next-single-property-change (point) 'highlighted))
          (setq beg (goto-char p))
          (setq color (background-color-at-point))
          (setq note (get-text-property (point) 'help-echo))
          (setq end (next-single-property-change (point) 'highlighted))
          (when (and beg end)
            (goto-char end)
            (add-to-list 'highlights (list beg
                                           end
                                           color
                                           note)
                         t)
            (goto-char end)))
        highlights)))

  (highlight-get-highlights)
#+end_src

#+begin_src emacs-lisp
  (defun highlight-save-filename ()
    "Return name of file to save overlays in."
    (when (buffer-file-name)
      (concat "." (file-name-nondirectory (buffer-file-name)) ".highlights")))

  (defun highlight-save ()
    "Loop through buffer and save regions with property highlighted.
  Save beginning, end of each region, color and help-echo on the
  first character of the region. Delete highlight file if it is empty."
    (interactive)
    (let ((fname (highlight-save-filename))
          (highlights (highlight-get-highlights)))
      (if (and fname highlights)
            (with-temp-file fname
              (print highlights (current-buffer)))
          ;; get rid of file if there are not highlights
          (when (and fname (file-exists-p fname))
            (delete-file fname)))))

  (add-hook 'after-save-hook 'highlight-save)
#+end_src

#+begin_src emacs-lisp
  (defun highlight-save-filename ()
    "Return name of file to save overlays in."
    (when (buffer-file-name)
      (concat "." (file-name-nondirectory (buffer-file-name)) ".highlights")))

  (defun highlight-save ()
    "Loop through buffer and save regions with property highlighted.
  Save beginning, end of each region, color and help-echo on the
  first character of the region. Delete highlight file if it is empty."
    (interactive)
    (let ((fname (highlight-save-filename))
          (highlights (highlight-get-highlights)))
      (if (and fname highlights)
            (with-temp-file fname
              (print highlights (current-buffer)))
          ;; get rid of file if there are not highlights
          (when (and fname (file-exists-p fname))
            (delete-file fname)))))

  (add-hook 'after-save-hook 'highlight-save)
#+end_src

#+begin_src emacs-lisp
  (defun highlight-load ()
    "Load and apply highlights."
    (interactive)
    (setq font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))
    (let ((fname (highlight-save-filename)))
      (when (and fname (file-exists-p fname))
        (mapcar
         (lambda (entry)
           (let ((beg (nth 0 entry))
                 (end (nth 1 entry))
                 (color (nth 2 entry))
                 (help-echo (nth 3 entry)))
             (set-text-properties
              beg end
              `(font-lock-face (:background ,color)
                               help-echo ,help-echo
                               highlighted t))))
         (with-temp-buffer (insert-file-contents fname)
                           (read (current-buffer)))))))


  (add-hook 'org-mode-hook 'highlight-load)
#+end_src

#+begin_src emacs-lisp
  (defun highlight-clear ()
    "Clear highlight at point."
    (interactive)
    (when (get-text-property (point) 'highlighted)
      (set-text-properties
       (next-single-property-change (point) 'highlighted)
       (previous-single-property-change (point) 'highlighted)
       nil)))

#+end_src

* Magit
:PROPERTIES:
:ID:       83d73378-f5ed-469e-979f-0075c30db713
:END:
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* Diary file location
:PROPERTIES:
:ID:       c16d46ab-da0e-4dd9-bd43-c8b394243db6
:END:
#+begin_src emacs-lisp
  (setq diary-file "~/Sync/my_multiverse/notes/org1/")
#+end_src
* A few more useful configurations
:PROPERTIES:
:ID:       8dc0ffd8-1b05-45f8-942d-e8fb29e95dde
:END:
#+begin_src emacs-lisp
  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+end_src
* Orderless
:PROPERTIES:
:ID:       c219de0f-31a6-4af8-b7d7-c2e2bcbb059a
:END:
#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
* Deft
:PROPERTIES:
:ID:       0c7d5498-19c0-438d-9162-3a889bd7e669
:END:
#+begin_src emacs-lisp
  (use-package deft
    :ensure t
    :custom
      (deft-extensions '("org" "md" "txt"))
      (deft-directory "~/Sync/my_multiverse/notes/deft_org/")
      (deft-use-filename-as-title t))
#+end_src

* Zetteldeft
:PROPERTIES:
:ID:       37778c6e-47c5-4f99-98d4-5b2c4691502d
:END:
#+begin_src emacs-lisp
  (use-package zetteldeft
    :ensure t
    :after deft
    :config (zetteldeft-set-classic-keybindings))
    
  (setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase)))  
#+end_src
