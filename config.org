* Changing default terminal and adding keybindings
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

* Minor settings
** Display time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** Subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+END_SRC

** Show line and column number
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

* Org
** emacs-lisp org-header footer
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-structure-template-alist
  ;; 	     '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Org bullets
#+BEGIN_SRC emacs-lisp
    (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
** Org agenda file directories
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("/home/durbar/Sync/coding_files/org_files/"))
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* Inhibit startup splash screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

* Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

* Ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Global highlight line mode
#+BEGIN_SRC emacs-lisp
  ;;(when window-system (global-hl-line-mode t))
#+END_SRC

* Global prettify symbols
#+BEGIN_SRC emacs-lisp
  ;;(when window-system (global-prettify-symbols-mode t))
#+END_SRC

* Auto-save and backup
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

* Beacon mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package beacon
  ;;   :ensure t
  ;;   :init
  ;;   (beacon-mode 1))
#+END_SRC

* Scroll, tool and menu bar
#+BEGIN_SRC emacs-lisp
  ;;(scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

* Ido
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  ;; (use-package smex
  ;;   :ensure t
  ;;   :init (smex-initialize)
  ;;   :bind
  ;;   ("M-x" . smex))
#+END_SRC

** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC

* Buffers
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC

** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC

* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* Config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

#+END_SRC

** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

* Convenient functions
** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
	  (kill-new
	   (buffer-substring
	    (point-at-bol)
	    (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC


* Geiser
#+BEGIN_SRC emacs-lisp
;  (use-package geiser
;    :ensure t)
;  (setq geiser-active-implementations '(guile))
#+END_SRC

* ob-ipython
#+BEGIN_SRC emacs-lisp
;  (use-package ob-ipython
;    :ensure t)
#+END_SRC


* python-interaction
#+BEGIN_SRC emacs-lisp
;  (setq python-shell-interpreter "/usr/bin/ipython"
;	python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

* org-babel-python
#+BEGIN_SRC emacs-lisp
;  (setq org-babel-python-command "/usr/bin/python")
#+END_SRC

* org-python
#+BEGIN_SRC emacs-lisp
;  (org-babel-do-load-languages
;   'org-babel-load-languages
;   '((python . t)
;     (ipython . t)))
#+END_SRC

* paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t)
#+END_SRC

* auctex
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+END_SRC

* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC


* org-indent
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC


* Battery indicator
#+BEGIN_SRC emacs-lisp
  ;(use-package fancy-battery
    ;:ensure t
    ;:config
    ;(setq fancy-battery-show-percentage t)
    ;(setq battery-update-interval 15)
    ;;(if window-system
        ;;(fancy-battery-mode)
      ;;(display-battery-mode)))

  (display-battery-mode)
#+END_SRC

* ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC

* Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

#+END_SRC

* Launching programs
#+BEGIN_SRC emacs-lisp
  ;; (defun exwm-async-run (name)
  ;;   (interactive)
  ;;   (start-process name nil name))

  ;; (defun durbar/launch-browser ()
  ;;   (interactive)
  ;;   (exwm-async-run "firefox"))

  ;; (defun durbar/graphical-file-manager ()
  ;;   (interactive)
  ;;   (exwm-async-run "thunar"))

  ;; (defun durbar/lock-screen ()
  ;;   (interactive)
  ;;   (exwm-async-run "slock"))

  ;; (defun durbar/shutdown ()
  ;;   (interactive)
  ;;   (start-process "halt" nil "sudo" "halt"))

  ;; (defun durbar/terminal ()
  ;;   (interactive)
  ;;   (exwm-async-run "urxvt"))

  ;; (global-set-key (kbd "s-u") 'durbar/terminal)
  ;; (global-set-key (kbd "s-f") 'durbar/launch-browser)
  ;; (global-set-key (kbd "s-t") 'durbar/graphical-file-manager)
  ;; (global-set-key (kbd "<XF86ScreenSaver>") 'durbar/lock-screen)
  ;; (global-set-key (kbd "<XF86PowerOff>") 'durbar/shutdown)
#+END_SRC

* Default browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "chromium")
#+END_SRC



* Show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

* Transparency
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(93 .80))
  ;;(add-to-list 'default-frame-alist '(alpha . (93 . 80)))
#+END_SRC

* color-theme-modern
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-modern
    :ensure t)
#+END_SRC


* Nimbus theme
#+BEGIN_SRC emacs-lisp
  (use-package nimbus-theme
    :ensure t)
#+END_SRC

* Modus theme
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :ensure t)
#+END_SRC


* Slime
** install
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t)
#+END_SRC

** slime config
#+BEGIN_SRC emacs-lisp
  ;;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+END_SRC

