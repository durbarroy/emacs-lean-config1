* Color settings
** Background color
#+begin_src elisp
  (set-background-color "honeydew")
  ;;(set-background-color "light yellow")
#+end_src

** Highlight color
#+begin_src elisp
  ;;(set-face-attribute 'region nil :background "#666" :foreground "#ffffff")
  (set-face-attribute 'region nil :background "pale green" :foreground "black")
#+end_src
* Changing default terminal and adding keybindings
#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src

* Minor settings
** Display time
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src

** Subword
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** Electric
#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+end_src

** Show line and column number
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Recent files
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
#+end_src

* Org
** emacs-lisp org-header footer
#+begin_src emacs-lisp
  ;; (add-to-list 'org-structure-template-alist
  ;; 	     '("el" "#+begin_src emacs-lisp\n?\n#+end_src"))
#+end_src


** Basic config
#+begin_src emacs-lisp
  ;;(setq org-src-window-setup 'current-window)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src
** Org agenda file directories
#+begin_src emacs-lisp
  (setq org-agenda-files '("/home/durbar/Sync/my_multiverse/notes/org/agenda"))
#+end_src
** Org capture template
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Sync/my_multiverse/notes/org/agenda/my-life.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree "~/Sync/my_multiverse/notes/org/journal/daily-journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src
** org inline image size
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

* Inhibit startup splash screen
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

* Scrolling
#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

* Ring-bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

* Global highlight line mode
#+begin_src emacs-lisp
  ;;(when window-system (global-hl-line-mode t))
#+end_src

* Global prettify symbols
#+begin_src emacs-lisp
  ;;(when window-system (global-prettify-symbols-mode t))
#+end_src

* Auto-save and backup
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

* Scroll, tool and menu bar
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

* Ido
** enable ido mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

** ido-vertical
#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** switch buffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+end_src

* Buffers
** kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+end_src

** enable ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

** expert mode
#+begin_src emacs-lisp
  (setq ibuffer-expert t)
#+end_src

** always kill current buffer
#+begin_src emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+end_src

* Config edit/reload
** edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

#+end_src

** reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* Window splitting function
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

* Convenient functions
** kill-whole-word
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+end_src

** copy-whole-line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
	  (kill-new
	   (buffer-substring
	    (point-at-bol)
	    (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+end_src

* ob-ipython
#+begin_src emacs-lisp
  (use-package ob-ipython
    :ensure t)
#+end_src

* python-interaction
#+begin_src emacs-lisp
    (setq python-shell-interpreter "/usr/bin/ipython"
          python-shell-interpreter-args "--simple-prompt -i")
    ;;(setq python-shell-interpreter "/usr/bin/python3")
#+end_src

* org-babel-python
#+begin_src emacs-lisp
    (setq org-babel-python-command "/usr/bin/python3")
#+end_src

* org-babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ipython .t)
     (perl . t)
     (latex . t))
   )
#+end_src

* paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t)
#+end_src

* auctex
#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
#+end_src

* swiper
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+end_src

* org-indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

* Battery indicator
#+begin_src emacs-lisp
  (display-battery-mode)
#+end_src

* Set UTF-8 encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

#+end_src

* Default browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "brave-browser-stable")
#+end_src

* Show parens
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

* Transparency
#+begin_src emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(93 .80))
  ;;(add-to-list 'default-frame-alist '(alpha . (93 . 80)))
#+end_src

* Slime
** install
#+begin_src emacs-lisp
  (use-package slime
    :ensure t)
#+end_src

** slime config
#+begin_src emacs-lisp
  ;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
#+end_src

* org-preview-html
#+begin_src emacs-lisp
  (use-package org-preview-html
    :ensure t)
#+end_src

* vertico mode
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

* Olivetti mode
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t)
#+end_src

* Modus themes
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t)
#+end_src

* open files in external app
#+begin_src emacs-lisp
  (defun xah-open-in-external-app (&optional @fname)
    "Open the current file or dired marked files in external app.
  When called in emacs lisp, if @fname is given, open that.
  URL `http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html'
  Version 2019-11-04 2021-02-16"
    (interactive)
    (let* (
           ($file-list
            (if @fname
                (progn (list @fname))
              (if (string-equal major-mode "dired-mode")
                  (dired-get-marked-files)
                (list (buffer-file-name)))))
           ($do-it-p (if (<= (length $file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))
      (when $do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda ($fpath)
             (shell-command (concat "PowerShell -Command \"Invoke-Item -LiteralPath\" " "'" (shell-quote-argument (expand-file-name $fpath )) "'")))
           $file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda ($fpath)
             (shell-command
              (concat "open " (shell-quote-argument $fpath))))  $file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda ($fpath) (let ((process-connection-type nil))
                              (start-process "" nil "xdg-open" $fpath))) $file-list))))))
#+end_src

* Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src

** Setting python-lanuage-server pylsp path

#+begin_src emacs-lisp
(add-to-list 'exec-path "/home/durbar/.local/bin/")
#+end_src

* Company mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+end_src
